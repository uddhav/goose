// This file is auto-generated by @hey-api/openapi-ts

import type { Options as ClientOptions, TDataShape, Client } from './client';
import type { AddSubRecipesData, AddSubRecipesResponses, AddSubRecipesErrors, ExtendPromptData, ExtendPromptResponses, ExtendPromptErrors, UpdateSessionConfigData, UpdateSessionConfigResponses, UpdateSessionConfigErrors, GetToolsData, GetToolsResponses, GetToolsErrors, UpdateAgentProviderData, UpdateAgentProviderResponses, UpdateAgentProviderErrors, UpdateRouterToolSelectorData, UpdateRouterToolSelectorResponses, UpdateRouterToolSelectorErrors, ReadAllConfigData, ReadAllConfigResponses, BackupConfigData, BackupConfigResponses, BackupConfigErrors, CreateCustomProviderData, CreateCustomProviderResponses, CreateCustomProviderErrors, RemoveCustomProviderData, RemoveCustomProviderResponses, RemoveCustomProviderErrors, GetExtensionsData, GetExtensionsResponses, GetExtensionsErrors, AddExtensionData, AddExtensionResponses, AddExtensionErrors, RemoveExtensionData, RemoveExtensionResponses, RemoveExtensionErrors, InitConfigData, InitConfigResponses, InitConfigErrors, UpsertPermissionsData, UpsertPermissionsResponses, UpsertPermissionsErrors, ProvidersData, ProvidersResponses, GetProviderModelsData, GetProviderModelsResponses, GetProviderModelsErrors, ReadConfigData, ReadConfigResponses, ReadConfigErrors, RecoverConfigData, RecoverConfigResponses, RecoverConfigErrors, RemoveConfigData, RemoveConfigResponses, RemoveConfigErrors, UpsertConfigData, UpsertConfigResponses, UpsertConfigErrors, ValidateConfigData, ValidateConfigResponses, ValidateConfigErrors, ConfirmPermissionData, ConfirmPermissionResponses, ConfirmPermissionErrors, ManageContextData, ManageContextResponses, ManageContextErrors, CreateRecipeData, CreateRecipeResponses, CreateRecipeErrors, DecodeRecipeData, DecodeRecipeResponses, DecodeRecipeErrors, EncodeRecipeData, EncodeRecipeResponses, EncodeRecipeErrors, ScanRecipeData, ScanRecipeResponses, CreateScheduleData, CreateScheduleResponses, CreateScheduleErrors, DeleteScheduleData, DeleteScheduleResponses, DeleteScheduleErrors, ListSchedulesData, ListSchedulesResponses, ListSchedulesErrors, UpdateScheduleData, UpdateScheduleResponses, UpdateScheduleErrors, InspectRunningJobData, InspectRunningJobResponses, InspectRunningJobErrors, KillRunningJobData, KillRunningJobResponses, PauseScheduleData, PauseScheduleResponses, PauseScheduleErrors, RunNowHandlerData, RunNowHandlerResponses, RunNowHandlerErrors, SessionsHandlerData, SessionsHandlerResponses, SessionsHandlerErrors, UnpauseScheduleData, UnpauseScheduleResponses, UnpauseScheduleErrors, ListSessionsData, ListSessionsResponses, ListSessionsErrors, GetSessionHistoryData, GetSessionHistoryResponses, GetSessionHistoryErrors } from './types.gen';
import { client as _heyApiClient } from './client.gen';

export type Options<TData extends TDataShape = TDataShape, ThrowOnError extends boolean = boolean> = ClientOptions<TData, ThrowOnError> & {
    /**
     * You can provide a client instance returned by `createClient()` instead of
     * individual options. This might be also useful if you want to implement a
     * custom client.
     */
    client?: Client;
    /**
     * You can pass arbitrary values through the `meta` object. This can be
     * used to access values that aren't defined as part of the SDK function.
     */
    meta?: Record<string, unknown>;
};

export const addSubRecipes = <ThrowOnError extends boolean = false>(options: Options<AddSubRecipesData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<AddSubRecipesResponses, AddSubRecipesErrors, ThrowOnError>({
        url: '/agent/add_sub_recipes',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

export const extendPrompt = <ThrowOnError extends boolean = false>(options: Options<ExtendPromptData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<ExtendPromptResponses, ExtendPromptErrors, ThrowOnError>({
        url: '/agent/prompt',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

export const updateSessionConfig = <ThrowOnError extends boolean = false>(options: Options<UpdateSessionConfigData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<UpdateSessionConfigResponses, UpdateSessionConfigErrors, ThrowOnError>({
        url: '/agent/session_config',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

export const getTools = <ThrowOnError extends boolean = false>(options?: Options<GetToolsData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetToolsResponses, GetToolsErrors, ThrowOnError>({
        url: '/agent/tools',
        ...options
    });
};

export const updateAgentProvider = <ThrowOnError extends boolean = false>(options: Options<UpdateAgentProviderData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<UpdateAgentProviderResponses, UpdateAgentProviderErrors, ThrowOnError>({
        url: '/agent/update_provider',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

export const updateRouterToolSelector = <ThrowOnError extends boolean = false>(options?: Options<UpdateRouterToolSelectorData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).post<UpdateRouterToolSelectorResponses, UpdateRouterToolSelectorErrors, ThrowOnError>({
        url: '/agent/update_router_tool_selector',
        ...options
    });
};

export const readAllConfig = <ThrowOnError extends boolean = false>(options?: Options<ReadAllConfigData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<ReadAllConfigResponses, unknown, ThrowOnError>({
        url: '/config',
        ...options
    });
};

export const backupConfig = <ThrowOnError extends boolean = false>(options?: Options<BackupConfigData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).post<BackupConfigResponses, BackupConfigErrors, ThrowOnError>({
        url: '/config/backup',
        ...options
    });
};

export const createCustomProvider = <ThrowOnError extends boolean = false>(options: Options<CreateCustomProviderData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<CreateCustomProviderResponses, CreateCustomProviderErrors, ThrowOnError>({
        url: '/config/custom-providers',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

export const removeCustomProvider = <ThrowOnError extends boolean = false>(options: Options<RemoveCustomProviderData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<RemoveCustomProviderResponses, RemoveCustomProviderErrors, ThrowOnError>({
        url: '/config/custom-providers/{id}',
        ...options
    });
};

export const getExtensions = <ThrowOnError extends boolean = false>(options?: Options<GetExtensionsData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetExtensionsResponses, GetExtensionsErrors, ThrowOnError>({
        url: '/config/extensions',
        ...options
    });
};

export const addExtension = <ThrowOnError extends boolean = false>(options: Options<AddExtensionData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<AddExtensionResponses, AddExtensionErrors, ThrowOnError>({
        url: '/config/extensions',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

export const removeExtension = <ThrowOnError extends boolean = false>(options: Options<RemoveExtensionData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<RemoveExtensionResponses, RemoveExtensionErrors, ThrowOnError>({
        url: '/config/extensions/{name}',
        ...options
    });
};

export const initConfig = <ThrowOnError extends boolean = false>(options?: Options<InitConfigData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).post<InitConfigResponses, InitConfigErrors, ThrowOnError>({
        url: '/config/init',
        ...options
    });
};

export const upsertPermissions = <ThrowOnError extends boolean = false>(options: Options<UpsertPermissionsData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<UpsertPermissionsResponses, UpsertPermissionsErrors, ThrowOnError>({
        url: '/config/permissions',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

export const providers = <ThrowOnError extends boolean = false>(options?: Options<ProvidersData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<ProvidersResponses, unknown, ThrowOnError>({
        url: '/config/providers',
        ...options
    });
};

export const getProviderModels = <ThrowOnError extends boolean = false>(options: Options<GetProviderModelsData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetProviderModelsResponses, GetProviderModelsErrors, ThrowOnError>({
        url: '/config/providers/{name}/models',
        ...options
    });
};

export const readConfig = <ThrowOnError extends boolean = false>(options: Options<ReadConfigData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<ReadConfigResponses, ReadConfigErrors, ThrowOnError>({
        url: '/config/read',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

export const recoverConfig = <ThrowOnError extends boolean = false>(options?: Options<RecoverConfigData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).post<RecoverConfigResponses, RecoverConfigErrors, ThrowOnError>({
        url: '/config/recover',
        ...options
    });
};

export const removeConfig = <ThrowOnError extends boolean = false>(options: Options<RemoveConfigData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<RemoveConfigResponses, RemoveConfigErrors, ThrowOnError>({
        url: '/config/remove',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

export const upsertConfig = <ThrowOnError extends boolean = false>(options: Options<UpsertConfigData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<UpsertConfigResponses, UpsertConfigErrors, ThrowOnError>({
        url: '/config/upsert',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

export const validateConfig = <ThrowOnError extends boolean = false>(options?: Options<ValidateConfigData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<ValidateConfigResponses, ValidateConfigErrors, ThrowOnError>({
        url: '/config/validate',
        ...options
    });
};

export const confirmPermission = <ThrowOnError extends boolean = false>(options: Options<ConfirmPermissionData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<ConfirmPermissionResponses, ConfirmPermissionErrors, ThrowOnError>({
        url: '/confirm',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

export const manageContext = <ThrowOnError extends boolean = false>(options: Options<ManageContextData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<ManageContextResponses, ManageContextErrors, ThrowOnError>({
        url: '/context/manage',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Create a Recipe configuration from the current session
 */
export const createRecipe = <ThrowOnError extends boolean = false>(options: Options<CreateRecipeData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<CreateRecipeResponses, CreateRecipeErrors, ThrowOnError>({
        url: '/recipes/create',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

export const decodeRecipe = <ThrowOnError extends boolean = false>(options: Options<DecodeRecipeData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<DecodeRecipeResponses, DecodeRecipeErrors, ThrowOnError>({
        url: '/recipes/decode',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

export const encodeRecipe = <ThrowOnError extends boolean = false>(options: Options<EncodeRecipeData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<EncodeRecipeResponses, EncodeRecipeErrors, ThrowOnError>({
        url: '/recipes/encode',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

export const scanRecipe = <ThrowOnError extends boolean = false>(options: Options<ScanRecipeData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<ScanRecipeResponses, unknown, ThrowOnError>({
        url: '/recipes/scan',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

export const createSchedule = <ThrowOnError extends boolean = false>(options: Options<CreateScheduleData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<CreateScheduleResponses, CreateScheduleErrors, ThrowOnError>({
        url: '/schedule/create',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

export const deleteSchedule = <ThrowOnError extends boolean = false>(options: Options<DeleteScheduleData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<DeleteScheduleResponses, DeleteScheduleErrors, ThrowOnError>({
        url: '/schedule/delete/{id}',
        ...options
    });
};

export const listSchedules = <ThrowOnError extends boolean = false>(options?: Options<ListSchedulesData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<ListSchedulesResponses, ListSchedulesErrors, ThrowOnError>({
        url: '/schedule/list',
        ...options
    });
};

export const updateSchedule = <ThrowOnError extends boolean = false>(options: Options<UpdateScheduleData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).put<UpdateScheduleResponses, UpdateScheduleErrors, ThrowOnError>({
        url: '/schedule/{id}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

export const inspectRunningJob = <ThrowOnError extends boolean = false>(options: Options<InspectRunningJobData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<InspectRunningJobResponses, InspectRunningJobErrors, ThrowOnError>({
        url: '/schedule/{id}/inspect',
        ...options
    });
};

export const killRunningJob = <ThrowOnError extends boolean = false>(options: Options<KillRunningJobData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<KillRunningJobResponses, unknown, ThrowOnError>({
        url: '/schedule/{id}/kill',
        ...options
    });
};

export const pauseSchedule = <ThrowOnError extends boolean = false>(options: Options<PauseScheduleData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<PauseScheduleResponses, PauseScheduleErrors, ThrowOnError>({
        url: '/schedule/{id}/pause',
        ...options
    });
};

export const runNowHandler = <ThrowOnError extends boolean = false>(options: Options<RunNowHandlerData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<RunNowHandlerResponses, RunNowHandlerErrors, ThrowOnError>({
        url: '/schedule/{id}/run_now',
        ...options
    });
};

export const sessionsHandler = <ThrowOnError extends boolean = false>(options: Options<SessionsHandlerData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<SessionsHandlerResponses, SessionsHandlerErrors, ThrowOnError>({
        url: '/schedule/{id}/sessions',
        ...options
    });
};

export const unpauseSchedule = <ThrowOnError extends boolean = false>(options: Options<UnpauseScheduleData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<UnpauseScheduleResponses, UnpauseScheduleErrors, ThrowOnError>({
        url: '/schedule/{id}/unpause',
        ...options
    });
};

export const listSessions = <ThrowOnError extends boolean = false>(options?: Options<ListSessionsData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<ListSessionsResponses, ListSessionsErrors, ThrowOnError>({
        url: '/sessions',
        ...options
    });
};

export const getSessionHistory = <ThrowOnError extends boolean = false>(options: Options<GetSessionHistoryData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetSessionHistoryResponses, GetSessionHistoryErrors, ThrowOnError>({
        url: '/sessions/{session_id}',
        ...options
    });
};